generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  credits       Int       @default(500)
  isPro         Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  images        ProcessedImage[]
  favorites     Favorite[]
  showcases     Showcase[]
  showcaseLikes ShowcaseLike[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model ProcessedImage {
  id          String     @id @default(cuid())
  userId      String
  prompt      String     @db.Text
  originalUrl String     @db.Text
  processedUrl String?   @db.Text
  template    String?
  settings    Json
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]
}

model Favorite {
  id        String         @id @default(cuid())
  userId    String
  imageId   String
  createdAt DateTime       @default(now())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  image     ProcessedImage @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([userId, imageId])
}

model Showcase {
  id            String         @id @default(cuid())
  userId        String
  title         String
  description   String?        @db.Text
  prompt        String         @db.Text
  originalImage String         @db.Text
  resultImage   String         @db.Text
  style         String         @default("general")
  likes         Int            @default(0)
  featured      Boolean        @default(false)
  approved      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedBy       ShowcaseLike[]
}

model ShowcaseLike {
  id         String   @id @default(cuid())
  userId     String
  showcaseId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  showcase   Showcase @relation(fields: [showcaseId], references: [id], onDelete: Cascade)

  @@unique([userId, showcaseId])
}